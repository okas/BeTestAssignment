// <auto-generated />
using System;
using BeTestAssignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeTestAssignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210814122542_AddedContractSeed")]
    partial class AddedContractSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeTestAssignment.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ab07a835-1db0-4610-8661-380134b7d361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "537e7eaf-d6fe-4eab-9693-3464c4c3561e",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "UBERGEEB@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDz9EcBSZL9ELLsJxQbV4p+QFELEWAwGRyRaH0N5YGM0uOEdO+WYzGzF9ta2VpnM6w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37637238-87a4-45a4-acd5-ec04c776b56e",
                            TwoFactorEnabled = false,
                            UserName = "ubergeeb@aol.com"
                        },
                        new
                        {
                            Id = "5c9b1c79-8cb8-4d85-b693-f8b1f6560dcd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c544a49-2dfc-4a93-9c64-78bf4b668bee",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "AMICHALO@LIVE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPWt7zp7mDRttwVl4vYoqxZY7wNHc717SayWPLLsfZ9v8l+32Kdnqq/vERV6GBpPUQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7e21df40-8458-4cce-bc5f-c4372bdd9608",
                            TwoFactorEnabled = false,
                            UserName = "amichalo@live.com"
                        },
                        new
                        {
                            Id = "79e3f8c0-d2cb-4fc0-b688-df6a4079cbec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cfc91ef-7010-4105-8f23-f1fa03c066de",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MASTINFO@SBCGLOBAL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEFmhMFWq9zP3JAIH62VlCXJR3QtfxMMfvDfobZquI84uwH+T2KpbzADuIcw1D4qDBQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "161a9c1a-8217-4ef4-9719-539526dd1281",
                            TwoFactorEnabled = false,
                            UserName = "mastinfo@sbcglobal.net"
                        },
                        new
                        {
                            Id = "3dc0badb-71dd-4ce7-b3e7-052349b2996f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70dec176-0164-41ef-a7e5-e22ab7ff33ab",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SBMRJBR@OPTONLINE.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEM4YssnYumCLglcXDAZ1OVvMnmfyDakN8KgaNXTnt0Wr5O9vC+RnVLfpq5UbUik0eQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2abdf02-6ef9-48ab-9ce0-03f44eb0e585",
                            TwoFactorEnabled = false,
                            UserName = "sbmrjbr@optonline.net"
                        },
                        new
                        {
                            Id = "b5ab401b-dfc6-4553-b275-5519253cf9da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b861ff92-6104-41c5-9321-28d8a877fc0c",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SATISHR@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKDvkKdQWYO4hGxjBF17Q6J578S8TDzib9l2bVYCRHMTQJAw8x9hBOoteZF0y6pGNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cecf23e5-e270-4cfa-a37b-6afb84d072b0",
                            TwoFactorEnabled = false,
                            UserName = "satishr@hotmail.com"
                        },
                        new
                        {
                            Id = "522608c8-bac8-43d6-bdce-cfdf77dfad43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca0a7baf-6bb6-4590-bafd-49009f01d4ae",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WEAZELMAN@ICLOUD.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELUUbvAnm97WGS0TFvzLxf3VkWseyBISLKrhxAseiXCDNzoY99+CjdgdCTBlUbJFXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6f0fcdbb-ec1f-4173-beac-05f683a807b1",
                            TwoFactorEnabled = false,
                            UserName = "weazelman@icloud.com"
                        },
                        new
                        {
                            Id = "8f3b1759-c4f9-49bd-8fa5-aac53f731ae8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63519956-2955-4739-ac48-1e87dbe3da9f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WMSZELIGA@YAHOO.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEB44XUHX+m/6prQZLfDTAnZqg76xBCdgkbdYYRbVfm6U3vsM6Rem8ub+qSejmxvF6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2c139b8-101d-4fd7-bee3-a8534ec946f3",
                            TwoFactorEnabled = false,
                            UserName = "wmszeliga@yahoo.ca"
                        },
                        new
                        {
                            Id = "2652e409-1d33-4933-baa2-951954e7cf6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "acafaf72-9e3d-4dc5-8d29-41370eb11dca",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "CDEROOVE@ATT.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEB0P3FGZvGYtjIhk/fIljsFONPvSp+DaEJ0DjPx2sFGvC9Kai1TTlGgxYETQYmUf4Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ac31807-525d-4213-826e-3966d8e0e6c3",
                            TwoFactorEnabled = false,
                            UserName = "cderoove@att.net"
                        },
                        new
                        {
                            Id = "23eaa10a-4fa2-4bfb-ba6a-455f3d2842c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c7199e9-4045-459e-b4e0-0e9a30a2d773",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "JAARNIAL@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIxsZvR5YwDZ7zRztLWbn+h/TTMb0r538yrs744UkyReTMhgzIteABO0+hu9rFqCgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7a04198-6c0e-4f8e-b6eb-72fb97a7daf4",
                            TwoFactorEnabled = false,
                            UserName = "jaarnial@aol.com"
                        },
                        new
                        {
                            Id = "8c6a38f1-80b4-4625-affc-061837bee170",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7725a54-bdf9-44e4-a343-b12f2a141a55",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SARAHS@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA2jXH33GSaNUdaH98vDIOVgJW1ui0vTXguYZm8PCuyCDcNGY2ddK2buioL9kmc55A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9f5f9a92-3b44-46c8-91cb-4a599c3d60bb",
                            TwoFactorEnabled = false,
                            UserName = "sarahs@outlook.com"
                        });
                });

            modelBuilder.Entity("BeTestAssignment.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b55dfab-c72e-4a1b-a229-fd11c406e146"),
                            Address = "Nurme 99, Varudi, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company One",
                            RegistryCode = "123451"
                        },
                        new
                        {
                            Id = new Guid("68a720d6-049f-4f4b-957e-04bfb4380d64"),
                            Address = "Kase 93, Paatsalu, Pärnumaa",
                            CountryCode = "est",
                            Name = "Company Two",
                            RegistryCode = "123452"
                        },
                        new
                        {
                            Id = new Guid("8e8004bc-25c9-4313-b9d9-60358ad2c995"),
                            Address = "Kraavi 4, Viljandi, Viljandimaa",
                            CountryCode = "est",
                            Name = "Company Three",
                            RegistryCode = "123453"
                        },
                        new
                        {
                            Id = new Guid("7fa7d08e-d5d1-4c34-bf7d-83c3f55a749b"),
                            Address = "Tamme 78, Tsiamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Four",
                            RegistryCode = "123454"
                        },
                        new
                        {
                            Id = new Guid("4f7750ac-02b9-43eb-af0d-1b8ae1601867"),
                            Address = "Jõe 41, Mõisamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Five",
                            RegistryCode = "123455"
                        },
                        new
                        {
                            Id = new Guid("88fb0b1b-ad3a-4991-98f6-4673263bca31"),
                            Address = "Õie 96, Neeruti, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company Six",
                            RegistryCode = "123456"
                        });
                });

            modelBuilder.Entity("BeTestAssignment.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b7a60ab-c380-4935-a3a9-626364ca3bc7"),
                            CompanyId = new Guid("88fb0b1b-ad3a-4991-98f6-4673263bca31"),
                            Occupation = "Carpenter",
                            StartDate = new DateTime(2021, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "8c6a38f1-80b4-4625-affc-061837bee170"
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BeTestAssignment.Models.Contract", b =>
                {
                    b.HasOne("BeTestAssignment.Models.Company", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeTestAssignment.Models.ApplicationUser", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
