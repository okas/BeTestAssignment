// <auto-generated />
using System;
using BeTestAssignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeTestAssignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210813190656_AddedContractModelWithConfiguration")]
    partial class AddedContractModelWithConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeTestAssignment.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ab07a835-1db0-4610-8661-380134b7d361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e3ccf4d-8700-4899-8cf5-751fe80d1a8f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "UBERGEEB@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKiMkNrqNRDXLW4mlzZ56Ibi9W/wI1IxTKrWsj3bNHSfLsKB2vQJrhhd4mMfRkJ2ag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11a28d92-0ac4-4c9b-8987-d12dbacd8f9d",
                            TwoFactorEnabled = false,
                            UserName = "ubergeeb@aol.com"
                        },
                        new
                        {
                            Id = "5c9b1c79-8cb8-4d85-b693-f8b1f6560dcd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca8a098d-f666-4245-baf4-2e90e9b90316",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "AMICHALO@LIVE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENmvkiYv8lqS9PmS4nnMLUH0E5J7DeQ5Bj8zomeF93tGjWD+ESOyR96iRWEsbC6jww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "814c2db1-dc4f-4ceb-9411-86e4fc0ac2bc",
                            TwoFactorEnabled = false,
                            UserName = "amichalo@live.com"
                        },
                        new
                        {
                            Id = "79e3f8c0-d2cb-4fc0-b688-df6a4079cbec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fe08c2b-2e2a-4198-b617-5609e2609fa6",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MASTINFO@SBCGLOBAL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAENlI9FWnekGCyXg6c2GB21fjISg/NuuwT86nncuqsv5yf+2hhXB1MQtaLo56v8cp2w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b5c98c8-89ba-4fad-a05b-6761e7a3441e",
                            TwoFactorEnabled = false,
                            UserName = "mastinfo@sbcglobal.net"
                        },
                        new
                        {
                            Id = "3dc0badb-71dd-4ce7-b3e7-052349b2996f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db75ac19-7e91-4203-ad70-23710a472e78",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SBMRJBR@OPTONLINE.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7Uup3BrFrKXnYl1rAni+fPoYecqEhxdjCyFBxgEmFTILkkl5asFfuIutQ+LUwYYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "252af2f4-c8b6-468d-9690-efbcb6952dfc",
                            TwoFactorEnabled = false,
                            UserName = "sbmrjbr@optonline.net"
                        },
                        new
                        {
                            Id = "b5ab401b-dfc6-4553-b275-5519253cf9da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b97a6e85-bdfc-4087-bd4e-9506c3e44f5b",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SATISHR@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJLoU6SCkyrAc63jPtsRN7a3zuWg85siMHV+DIL9iddGaXxC1xbKi1YQB90X5P9r3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b76c9546-90de-4b95-9689-e477ba0c12f0",
                            TwoFactorEnabled = false,
                            UserName = "satishr@hotmail.com"
                        },
                        new
                        {
                            Id = "522608c8-bac8-43d6-bdce-cfdf77dfad43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ffb3edf-8f54-471e-9d34-c9cface7d2db",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WEAZELMAN@ICLOUD.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBR/WNMwDYn3iXZZYUGWY4YRR8unnqwbxHJ6t9HxW3zTBlWDr+g0aKn2YnKPT7ebhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4e06061-75f9-4548-b4f3-efaa96d5d4f5",
                            TwoFactorEnabled = false,
                            UserName = "weazelman@icloud.com"
                        },
                        new
                        {
                            Id = "8f3b1759-c4f9-49bd-8fa5-aac53f731ae8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56bf621d-7776-4cf7-9e67-6a3ba8885d48",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WMSZELIGA@YAHOO.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMBn4KG0v3e2LV6ypCYNEZgD1g4de2hbhfMqnOdzQmyDXzQtexqLD3YKOfCQfAtv7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8e2aaa4-d440-4f1f-b77f-a6414271a72b",
                            TwoFactorEnabled = false,
                            UserName = "wmszeliga@yahoo.ca"
                        },
                        new
                        {
                            Id = "2652e409-1d33-4933-baa2-951954e7cf6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "beb1eae0-f1ba-47eb-8c2b-e7c0728ed7c4",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "CDEROOVE@ATT.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEA4yk/wWQrG4nRlLzRBLj+rII/V4RBN+ijhFczItdW3BaT3Lszv1O1eo1A6outHiXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e3ebee13-66b8-43da-b1cd-6a75c0a7699c",
                            TwoFactorEnabled = false,
                            UserName = "cderoove@att.net"
                        },
                        new
                        {
                            Id = "23eaa10a-4fa2-4bfb-ba6a-455f3d2842c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46862783-612e-4828-9de9-9920c10bdf7c",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "JAARNIAL@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA8NRF04S7CWProkRC2d6psH/PdCPobu3JIr90MIu7i6L14YXj/4mbYgtvZUyY/GrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9beb133-b7f4-43b0-923a-04eabf16da69",
                            TwoFactorEnabled = false,
                            UserName = "jaarnial@aol.com"
                        },
                        new
                        {
                            Id = "8c6a38f1-80b4-4625-affc-061837bee170",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46c00ff0-d45d-4232-8121-11c519c6d3ee",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SARAHS@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHsrznoE9BWGzPHaiQtF/m6ZB9Wf8v3tM6gEb+WyJdxaJHrYkBGnaf1et/ty10S6Xg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "96e373d9-a75a-42d0-a04b-6eb4e1e44402",
                            TwoFactorEnabled = false,
                            UserName = "sarahs@outlook.com"
                        });
                });

            modelBuilder.Entity("BeTestAssignment.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b55dfab-c72e-4a1b-a229-fd11c406e146"),
                            Address = "Nurme 99, Varudi, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company One",
                            RegistryCode = "123451"
                        },
                        new
                        {
                            Id = new Guid("68a720d6-049f-4f4b-957e-04bfb4380d64"),
                            Address = "Kase 93, Paatsalu, Pärnumaa",
                            CountryCode = "est",
                            Name = "Company Two",
                            RegistryCode = "123452"
                        },
                        new
                        {
                            Id = new Guid("8e8004bc-25c9-4313-b9d9-60358ad2c995"),
                            Address = "Kraavi 4, Viljandi, Viljandimaa",
                            CountryCode = "est",
                            Name = "Company Three",
                            RegistryCode = "123453"
                        },
                        new
                        {
                            Id = new Guid("7fa7d08e-d5d1-4c34-bf7d-83c3f55a749b"),
                            Address = "Tamme 78, Tsiamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Four",
                            RegistryCode = "123454"
                        },
                        new
                        {
                            Id = new Guid("4f7750ac-02b9-43eb-af0d-1b8ae1601867"),
                            Address = "Jõe 41, Mõisamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Five",
                            RegistryCode = "123455"
                        },
                        new
                        {
                            Id = new Guid("88fb0b1b-ad3a-4991-98f6-4673263bca31"),
                            Address = "Õie 96, Neeruti, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company Six",
                            RegistryCode = "123456"
                        });
                });

            modelBuilder.Entity("BeTestAssignment.Models.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BeTestAssignment.Models.Contract", b =>
                {
                    b.HasOne("BeTestAssignment.Models.Company", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BeTestAssignment.Models.ApplicationUser", "User")
                        .WithMany("Contracts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
