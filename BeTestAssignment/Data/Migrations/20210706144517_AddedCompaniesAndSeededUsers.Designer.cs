// <auto-generated />
using System;
using BeTestAssignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeTestAssignment.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210706144517_AddedCompaniesAndSeededUsers")]
    partial class AddedCompaniesAndSeededUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeTestAssignment.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "ab07a835-1db0-4610-8661-380134b7d361",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54088a67-6b16-49fd-ae64-7efaca0792fb",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "UBERGEEB@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC2Yd/0u+AZIFASX43OfBgvcqGFTLMlBDZ4KwJiZykC+iX80CS6cprUdQ5SacvU2JA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "21c4c2c6-57bf-4f06-b89a-ced39991a657",
                            TwoFactorEnabled = false,
                            UserName = "ubergeeb@aol.com"
                        },
                        new
                        {
                            Id = "5c9b1c79-8cb8-4d85-b693-f8b1f6560dcd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a26386f-cb30-4a30-82c6-d8ad1415e1ff",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "AMICHALO@LIVE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC3pDTiVGYOurwt2TrdLuUnHE+Bj/Qwuuvmg/xiLP2IMDaChnNNkhHEF8RPS0qRkGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ecb15de4-8aa4-44be-af24-efc9fb833896",
                            TwoFactorEnabled = false,
                            UserName = "amichalo@live.com"
                        },
                        new
                        {
                            Id = "79e3f8c0-d2cb-4fc0-b688-df6a4079cbec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63194488-88fe-4477-be42-958ea66bab16",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "MASTINFO@SBCGLOBAL.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEItvjVjYp+aknsT/IeCU8H0/1ofeqnRPcVXb4d+KsUoogNhaxVBY8mk6dlvj6By5LQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80986410-e9a2-41bf-be27-4cbee191e76b",
                            TwoFactorEnabled = false,
                            UserName = "mastinfo@sbcglobal.net"
                        },
                        new
                        {
                            Id = "3dc0badb-71dd-4ce7-b3e7-052349b2996f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "115a3b18-bb6b-4f48-9d40-0c3eb6d53bb6",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SBMRJBR@OPTONLINE.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEI5mX9cH849GIKT/sUMaBOiZOmcjn8Y41vEl/NeWMdtaq4edi/oOg5PdCV6i+bsyQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fb60eccc-fe93-4c94-891a-baf80df5e715",
                            TwoFactorEnabled = false,
                            UserName = "sbmrjbr@optonline.net"
                        },
                        new
                        {
                            Id = "b5ab401b-dfc6-4553-b275-5519253cf9da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3840ed6-fa2e-4bc3-a429-24587cb4b547",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SATISHR@HOTMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENYUmQ3mjaFyRJRtdXiHHKlZPPdXTYt6LTp1yq3H7e6n0007m4d6TgBQDSyj2i5ppg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b906418-b3d1-4b35-9c5c-6ac6e0d6eb47",
                            TwoFactorEnabled = false,
                            UserName = "satishr@hotmail.com"
                        },
                        new
                        {
                            Id = "522608c8-bac8-43d6-bdce-cfdf77dfad43",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aff2795f-c977-4773-966e-24c3de12483b",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WEAZELMAN@ICLOUD.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENbwd2YTNvHjYgiSfKNol1AxDgl0/soZXVhXt7PPsSQif5yfTbSFLrJwJ6R0TsBOoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db82c9a9-1a03-43c9-a543-92bade695400",
                            TwoFactorEnabled = false,
                            UserName = "weazelman@icloud.com"
                        },
                        new
                        {
                            Id = "8f3b1759-c4f9-49bd-8fa5-aac53f731ae8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d77f9822-0a9a-4c74-a621-7128e08036b5",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "WMSZELIGA@YAHOO.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7GzDn9hcO3wDh58M+WyCkdrtSYh2ug8aIJhVW/4Ye7AHbYF4LvYOp//Epv4x1R2g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c19b81c7-e16f-414d-a26b-f37bd8054f9e",
                            TwoFactorEnabled = false,
                            UserName = "wmszeliga@yahoo.ca"
                        },
                        new
                        {
                            Id = "2652e409-1d33-4933-baa2-951954e7cf6b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d70a5330-e718-4faf-977e-9518fd29fdac",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "CDEROOVE@ATT.NET",
                            PasswordHash = "AQAAAAEAACcQAAAAEKz962MuRQASEWrA5vigbARX4BdDTUtquHMlBWYTc+CyGCVugOA9UTZz89+3cuzOfw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94aa28ff-4769-4201-a745-ad408db43950",
                            TwoFactorEnabled = false,
                            UserName = "cderoove@att.net"
                        },
                        new
                        {
                            Id = "23eaa10a-4fa2-4bfb-ba6a-455f3d2842c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f2c118f0-3e38-4044-98a1-b33d070bd31f",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "JAARNIAL@AOL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELVAYsxw20Ra5V4MDpvaK/us/fmTLEQ9fhZTHkkwUVZhJY4OkYvgchQwcLcYhbgfHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c43ce542-9af9-4762-9b31-6e528beae9ec",
                            TwoFactorEnabled = false,
                            UserName = "jaarnial@aol.com"
                        },
                        new
                        {
                            Id = "8c6a38f1-80b4-4625-affc-061837bee170",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "988acb66-6911-42c8-88fc-3ba4fa399ba9",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SARAHS@OUTLOOK.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED8A5Ia2Rh+4nSI1gxItuF+lFXb5i6degAFsMZ+3QTvcMiJUq3+GVpcAZHrjnwujcA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "473ca7ef-f39c-4555-a1a4-4e2f4651078c",
                            TwoFactorEnabled = false,
                            UserName = "sarahs@outlook.com"
                        });
                });

            modelBuilder.Entity("BeTestAssignment.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistryCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b55dfab-c72e-4a1b-a229-fd11c406e146"),
                            Address = "Nurme 99, Varudi, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company One",
                            RegistryCode = "123451"
                        },
                        new
                        {
                            Id = new Guid("68a720d6-049f-4f4b-957e-04bfb4380d64"),
                            Address = "Kase 93, Paatsalu, Pärnumaa",
                            CountryCode = "est",
                            Name = "Company Two",
                            RegistryCode = "123452"
                        },
                        new
                        {
                            Id = new Guid("8e8004bc-25c9-4313-b9d9-60358ad2c995"),
                            Address = "Kraavi 4, Viljandi, Viljandimaa",
                            CountryCode = "est",
                            Name = "Company Three",
                            RegistryCode = "123453"
                        },
                        new
                        {
                            Id = new Guid("7fa7d08e-d5d1-4c34-bf7d-83c3f55a749b"),
                            Address = "Tamme 78, Tsiamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Four",
                            RegistryCode = "123454"
                        },
                        new
                        {
                            Id = new Guid("4f7750ac-02b9-43eb-af0d-1b8ae1601867"),
                            Address = "Jõe 41, Mõisamäe, Võrumaa",
                            CountryCode = "est",
                            Name = "Company Five",
                            RegistryCode = "123455"
                        },
                        new
                        {
                            Id = new Guid("88fb0b1b-ad3a-4991-98f6-4673263bca31"),
                            Address = "Õie 96, Neeruti, Lääne-Virumaa",
                            CountryCode = "est",
                            Name = "Company Six",
                            RegistryCode = "123456"
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeTestAssignment.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
